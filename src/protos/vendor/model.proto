syntax = "proto3";

package model;

// Speech recognition request
message SpeechRequest {
  string audio_data = 1;  // Base64 encoded audio data
  string audio_format = 2; // Format of the audio (e.g., "wav", "mp3")
}

// Role enumeration for chat messages
enum Role {
  ROLE_UNSPECIFIED = 0;
  ROLE_SYSTEM = 1;
  ROLE_USER = 2;
  ROLE_ASSISTANT = 3;
}

// Chat message structure
message ChatMessage{
  Role role = 1;
  string content = 2;
}

// Text request containing a sequence of chat messages
message TextRequest {
  repeated ChatMessage messages = 1;
}

// Text response from the model
message TextResponse {
  string text = 1;  // Generated text response
  // Add streaming URL field for streaming responses
  string streaming_url = 2; // WebSocket URL for streaming responses
}

// Streaming request message
message StreamingRequest {
  repeated ChatMessage messages = 1;
  string session_id = 2; // Optional session ID for tracking the streaming session
}

// Streaming response message
message StreamingResponse {
  string streaming_url = 1; // WebSocket URL for streaming responses
  string session_id = 2;    // Session ID for the streaming session
}

// Speech synthesis response
message SpeechResponse {
  string audio_data = 1; // Base64 encoded audio data
  string audio_format = 2; // Format of the audio (e.g., "wav", "mp3")
}

// Model service definition
service ModelService {
  // Convert speech to text
  rpc SpeechToText (SpeechRequest) returns (TextResponse);
  
  // Process text chat and generate response
  rpc TextChat (TextRequest) returns (TextResponse);
  
  // Convert text to speech
  rpc TextToSpeech (TextRequest) returns (SpeechResponse);
  
  // Stream text chat responses
  rpc StreamingTextChat (StreamingRequest) returns (StreamingResponse);
}