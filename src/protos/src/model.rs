// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `model.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:model.SpeechRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SpeechRequest {
    // message fields
    // @@protoc_insertion_point(field:model.SpeechRequest.audio_data)
    pub audio_data: ::std::string::String,
    // @@protoc_insertion_point(field:model.SpeechRequest.audio_format)
    pub audio_format: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:model.SpeechRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SpeechRequest {
    fn default() -> &'a SpeechRequest {
        <SpeechRequest as ::protobuf::Message>::default_instance()
    }
}

impl SpeechRequest {
    pub fn new() -> SpeechRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "audio_data",
            |m: &SpeechRequest| { &m.audio_data },
            |m: &mut SpeechRequest| { &mut m.audio_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "audio_format",
            |m: &SpeechRequest| { &m.audio_format },
            |m: &mut SpeechRequest| { &mut m.audio_format },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SpeechRequest>(
            "SpeechRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SpeechRequest {
    const NAME: &'static str = "SpeechRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.audio_data = is.read_string()?;
                },
                18 => {
                    self.audio_format = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.audio_data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.audio_data);
        }
        if !self.audio_format.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.audio_format);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.audio_data.is_empty() {
            os.write_string(1, &self.audio_data)?;
        }
        if !self.audio_format.is_empty() {
            os.write_string(2, &self.audio_format)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SpeechRequest {
        SpeechRequest::new()
    }

    fn clear(&mut self) {
        self.audio_data.clear();
        self.audio_format.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SpeechRequest {
        static instance: SpeechRequest = SpeechRequest {
            audio_data: ::std::string::String::new(),
            audio_format: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SpeechRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SpeechRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SpeechRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpeechRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:model.TextRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TextRequest {
    // message fields
    // @@protoc_insertion_point(field:model.TextRequest.text)
    pub text: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:model.TextRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TextRequest {
    fn default() -> &'a TextRequest {
        <TextRequest as ::protobuf::Message>::default_instance()
    }
}

impl TextRequest {
    pub fn new() -> TextRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &TextRequest| { &m.text },
            |m: &mut TextRequest| { &mut m.text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TextRequest>(
            "TextRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TextRequest {
    const NAME: &'static str = "TextRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.text = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.text.is_empty() {
            os.write_string(1, &self.text)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TextRequest {
        TextRequest::new()
    }

    fn clear(&mut self) {
        self.text.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TextRequest {
        static instance: TextRequest = TextRequest {
            text: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TextRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TextRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TextRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:model.TextResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TextResponse {
    // message fields
    // @@protoc_insertion_point(field:model.TextResponse.text)
    pub text: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:model.TextResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TextResponse {
    fn default() -> &'a TextResponse {
        <TextResponse as ::protobuf::Message>::default_instance()
    }
}

impl TextResponse {
    pub fn new() -> TextResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &TextResponse| { &m.text },
            |m: &mut TextResponse| { &mut m.text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TextResponse>(
            "TextResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TextResponse {
    const NAME: &'static str = "TextResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.text = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.text.is_empty() {
            os.write_string(1, &self.text)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TextResponse {
        TextResponse::new()
    }

    fn clear(&mut self) {
        self.text.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TextResponse {
        static instance: TextResponse = TextResponse {
            text: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TextResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TextResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TextResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:model.SpeechResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SpeechResponse {
    // message fields
    // @@protoc_insertion_point(field:model.SpeechResponse.audio_data)
    pub audio_data: ::std::string::String,
    // @@protoc_insertion_point(field:model.SpeechResponse.audio_format)
    pub audio_format: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:model.SpeechResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SpeechResponse {
    fn default() -> &'a SpeechResponse {
        <SpeechResponse as ::protobuf::Message>::default_instance()
    }
}

impl SpeechResponse {
    pub fn new() -> SpeechResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "audio_data",
            |m: &SpeechResponse| { &m.audio_data },
            |m: &mut SpeechResponse| { &mut m.audio_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "audio_format",
            |m: &SpeechResponse| { &m.audio_format },
            |m: &mut SpeechResponse| { &mut m.audio_format },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SpeechResponse>(
            "SpeechResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SpeechResponse {
    const NAME: &'static str = "SpeechResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.audio_data = is.read_string()?;
                },
                18 => {
                    self.audio_format = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.audio_data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.audio_data);
        }
        if !self.audio_format.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.audio_format);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.audio_data.is_empty() {
            os.write_string(1, &self.audio_data)?;
        }
        if !self.audio_format.is_empty() {
            os.write_string(2, &self.audio_format)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SpeechResponse {
        SpeechResponse::new()
    }

    fn clear(&mut self) {
        self.audio_data.clear();
        self.audio_format.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SpeechResponse {
        static instance: SpeechResponse = SpeechResponse {
            audio_data: ::std::string::String::new(),
            audio_format: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SpeechResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SpeechResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SpeechResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpeechResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bmodel.proto\x12\x05model\"Q\n\rSpeechRequest\x12\x1d\n\naudio_data\
    \x18\x01\x20\x01(\tR\taudioData\x12!\n\x0caudio_format\x18\x02\x20\x01(\
    \tR\x0baudioFormat\"!\n\x0bTextRequest\x12\x12\n\x04text\x18\x01\x20\x01\
    (\tR\x04text\"\"\n\x0cTextResponse\x12\x12\n\x04text\x18\x01\x20\x01(\tR\
    \x04text\"R\n\x0eSpeechResponse\x12\x1d\n\naudio_data\x18\x01\x20\x01(\t\
    R\taudioData\x12!\n\x0caudio_format\x18\x02\x20\x01(\tR\x0baudioFormat2\
    \xb9\x01\n\x0cModelService\x129\n\x0cSpeechToText\x12\x14.model.SpeechRe\
    quest\x1a\x13.model.TextResponse\x123\n\x08TextChat\x12\x12.model.TextRe\
    quest\x1a\x13.model.TextResponse\x129\n\x0cTextToSpeech\x12\x12.model.Te\
    xtRequest\x1a\x15.model.SpeechResponseb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(SpeechRequest::generated_message_descriptor_data());
            messages.push(TextRequest::generated_message_descriptor_data());
            messages.push(TextResponse::generated_message_descriptor_data());
            messages.push(SpeechResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
