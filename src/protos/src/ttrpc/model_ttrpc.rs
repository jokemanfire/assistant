// This file is generated by ttrpc-compiler 0.7.0. Do not edit
// @generated

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unknown_lints)]
#![allow(clipto_camel_casepy)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
#![allow(clippy::all)]
use protobuf::{CodedInputStream, CodedOutputStream, Message};
use std::collections::HashMap;
use std::sync::Arc;
use async_trait::async_trait;

#[derive(Clone)]
pub struct ModelServiceClient {
    client: ::ttrpc::r#async::Client,
}

impl ModelServiceClient {
    pub fn new(client: ::ttrpc::r#async::Client) -> Self {
        ModelServiceClient {
            client,
        }
    }

    pub async fn speech_to_text(&self, ctx: ttrpc::context::Context, req: &super::model::SpeechRequest) -> ::ttrpc::Result<super::model::TextResponse> {
        let mut cres = super::model::TextResponse::new();
        ::ttrpc::async_client_request!(self, ctx, req, "model.ModelService", "SpeechToText", cres);
    }

    pub async fn text_chat(&self, ctx: ttrpc::context::Context, req: &super::model::TextRequest) -> ::ttrpc::Result<super::model::TextResponse> {
        let mut cres = super::model::TextResponse::new();
        ::ttrpc::async_client_request!(self, ctx, req, "model.ModelService", "TextChat", cres);
    }

    pub async fn text_to_speech(&self, ctx: ttrpc::context::Context, req: &super::model::TextRequest) -> ::ttrpc::Result<super::model::SpeechResponse> {
        let mut cres = super::model::SpeechResponse::new();
        ::ttrpc::async_client_request!(self, ctx, req, "model.ModelService", "TextToSpeech", cres);
    }
}

struct SpeechToTextMethod {
    service: Arc<dyn ModelService + Send + Sync>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for SpeechToTextMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, model, SpeechRequest, speech_to_text);
    }
}

struct TextChatMethod {
    service: Arc<dyn ModelService + Send + Sync>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for TextChatMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, model, TextRequest, text_chat);
    }
}

struct TextToSpeechMethod {
    service: Arc<dyn ModelService + Send + Sync>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for TextToSpeechMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, model, TextRequest, text_to_speech);
    }
}

#[async_trait]
pub trait ModelService: Sync {
    async fn speech_to_text(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::model::SpeechRequest) -> ::ttrpc::Result<super::model::TextResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/model.ModelService/SpeechToText is not supported".to_string())))
    }
    async fn text_chat(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::model::TextRequest) -> ::ttrpc::Result<super::model::TextResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/model.ModelService/TextChat is not supported".to_string())))
    }
    async fn text_to_speech(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::model::TextRequest) -> ::ttrpc::Result<super::model::SpeechResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/model.ModelService/TextToSpeech is not supported".to_string())))
    }
}

pub fn create_model_service(service: Arc<dyn ModelService + Send + Sync>) -> HashMap<String, ::ttrpc::r#async::Service> {
    let mut ret = HashMap::new();
    let mut methods = HashMap::new();
    let streams = HashMap::new();

    methods.insert("SpeechToText".to_string(),
                    Box::new(SpeechToTextMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("TextChat".to_string(),
                    Box::new(TextChatMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("TextToSpeech".to_string(),
                    Box::new(TextToSpeechMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    ret.insert("model.ModelService".to_string(), ::ttrpc::r#async::Service{ methods, streams });
    ret
}
